/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.22.2
 * source: cluster/proto/cluster-rpc.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
 import * as pb_1 from "google-protobuf";
 export class Node extends pb_1.Message {
     #one_of_decls: number[][] = [];
     constructor(data?: any[] | {
         id?: string;
         host?: string;
         port?: number;
     }) {
         super();
         pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
         if (!Array.isArray(data) && typeof data == "object") {
             if ("id" in data && data.id != undefined) {
                 this.id = data.id;
             }
             if ("host" in data && data.host != undefined) {
                 this.host = data.host;
             }
             if ("port" in data && data.port != undefined) {
                 this.port = data.port;
             }
         }
     }
     get id() {
         return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
     }
     set id(value: string) {
         pb_1.Message.setField(this, 1, value);
     }
     get host() {
         return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
     }
     set host(value: string) {
         pb_1.Message.setField(this, 2, value);
     }
     get port() {
         return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
     }
     set port(value: number) {
         pb_1.Message.setField(this, 3, value);
     }
     static fromObject(data: {
         id?: string;
         host?: string;
         port?: number;
     }): Node {
         const message = new Node({});
         if (data.id != null) {
             message.id = data.id;
         }
         if (data.host != null) {
             message.host = data.host;
         }
         if (data.port != null) {
             message.port = data.port;
         }
         return message;
     }
     toObject() {
         const data: {
             id?: string;
             host?: string;
             port?: number;
         } = {};
         if (this.id != null) {
             data.id = this.id;
         }
         if (this.host != null) {
             data.host = this.host;
         }
         if (this.port != null) {
             data.port = this.port;
         }
         return data;
     }
     serialize(): Uint8Array;
     serialize(w: pb_1.BinaryWriter): void;
     serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
         const writer = w || new pb_1.BinaryWriter();
         if (this.id.length)
             writer.writeString(1, this.id);
         if (this.host.length)
             writer.writeString(2, this.host);
         if (this.port != 0)
             writer.writeInt32(3, this.port);
         if (!w)
             return writer.getResultBuffer();
     }
     static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Node {
         const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Node();
         while (reader.nextField()) {
             if (reader.isEndGroup())
                 break;
             switch (reader.getFieldNumber()) {
                 case 1:
                     message.id = reader.readString();
                     break;
                 case 2:
                     message.host = reader.readString();
                     break;
                 case 3:
                     message.port = reader.readInt32();
                     break;
                 default: reader.skipField();
             }
         }
         return message;
     }
     serializeBinary(): Uint8Array {
         return this.serialize();
     }
     static deserializeBinary(bytes: Uint8Array): Node {
         return Node.deserialize(bytes);
     }
 }
 export class NodeList extends pb_1.Message {
     #one_of_decls: number[][] = [];
     constructor(data?: any[] | {
         id?: string;
         nodes?: Node[];
     }) {
         super();
         pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
         if (!Array.isArray(data) && typeof data == "object") {
             if ("id" in data && data.id != undefined) {
                 this.id = data.id;
             }
             if ("nodes" in data && data.nodes != undefined) {
                 this.nodes = data.nodes;
             }
         }
     }
     get id() {
         return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
     }
     set id(value: string) {
         pb_1.Message.setField(this, 1, value);
     }
     get nodes() {
         return pb_1.Message.getRepeatedWrapperField(this, Node, 2) as Node[];
     }
     set nodes(value: Node[]) {
         pb_1.Message.setRepeatedWrapperField(this, 2, value);
     }
     static fromObject(data: {
         id?: string;
         nodes?: ReturnType<typeof Node.prototype.toObject>[];
     }): NodeList {
         const message = new NodeList({});
         if (data.id != null) {
             message.id = data.id;
         }
         if (data.nodes != null) {
             message.nodes = data.nodes.map(item => Node.fromObject(item));
         }
         return message;
     }
     toObject() {
         const data: {
             id?: string;
             nodes?: ReturnType<typeof Node.prototype.toObject>[];
         } = {};
         if (this.id != null) {
             data.id = this.id;
         }
         if (this.nodes != null) {
             data.nodes = this.nodes.map((item: Node) => item.toObject());
         }
         return data;
     }
     serialize(): Uint8Array;
     serialize(w: pb_1.BinaryWriter): void;
     serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
         const writer = w || new pb_1.BinaryWriter();
         if (this.id.length)
             writer.writeString(1, this.id);
         if (this.nodes.length)
             writer.writeRepeatedMessage(2, this.nodes, (item: Node) => item.serialize(writer));
         if (!w)
             return writer.getResultBuffer();
     }
     static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NodeList {
         const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NodeList();
         while (reader.nextField()) {
             if (reader.isEndGroup())
                 break;
             switch (reader.getFieldNumber()) {
                 case 1:
                     message.id = reader.readString();
                     break;
                 case 2:
                     reader.readMessage(message.nodes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Node.deserialize(reader), Node));
                     break;
                 default: reader.skipField();
             }
         }
         return message;
     }
     serializeBinary(): Uint8Array {
         return this.serialize();
     }
     static deserializeBinary(bytes: Uint8Array): NodeList {
         return NodeList.deserialize(bytes);
     }
 }
 export class Void extends pb_1.Message {
     #one_of_decls: number[][] = [];
     constructor(data?: any[] | {}) {
         super();
         pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
         if (!Array.isArray(data) && typeof data == "object") { }
     }
     static fromObject(data: {}): Void {
         const message = new Void({});
         return message;
     }
     toObject() {
         const data: {} = {};
         return data;
     }
     serialize(): Uint8Array;
     serialize(w: pb_1.BinaryWriter): void;
     serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
         const writer = w || new pb_1.BinaryWriter();
         if (!w)
             return writer.getResultBuffer();
     }
     static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Void {
         const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Void();
         while (reader.nextField()) {
             if (reader.isEndGroup())
                 break;
             switch (reader.getFieldNumber()) {
                 default: reader.skipField();
             }
         }
         return message;
     }
     serializeBinary(): Uint8Array {
         return this.serialize();
     }
     static deserializeBinary(bytes: Uint8Array): Void {
         return Void.deserialize(bytes);
     }
 }
 export class Id extends pb_1.Message {
     #one_of_decls: number[][] = [];
     constructor(data?: any[] | {
         id?: string;
     }) {
         super();
         pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
         if (!Array.isArray(data) && typeof data == "object") {
             if ("id" in data && data.id != undefined) {
                 this.id = data.id;
             }
         }
     }
     get id() {
         return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
     }
     set id(value: string) {
         pb_1.Message.setField(this, 1, value);
     }
     static fromObject(data: {
         id?: string;
     }): Id {
         const message = new Id({});
         if (data.id != null) {
             message.id = data.id;
         }
         return message;
     }
     toObject() {
         const data: {
             id?: string;
         } = {};
         if (this.id != null) {
             data.id = this.id;
         }
         return data;
     }
     serialize(): Uint8Array;
     serialize(w: pb_1.BinaryWriter): void;
     serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
         const writer = w || new pb_1.BinaryWriter();
         if (this.id.length)
             writer.writeString(1, this.id);
         if (!w)
             return writer.getResultBuffer();
     }
     static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Id {
         const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Id();
         while (reader.nextField()) {
             if (reader.isEndGroup())
                 break;
             switch (reader.getFieldNumber()) {
                 case 1:
                     message.id = reader.readString();
                     break;
                 default: reader.skipField();
             }
         }
         return message;
     }
     serializeBinary(): Uint8Array {
         return this.serialize();
     }
     static deserializeBinary(bytes: Uint8Array): Id {
         return Id.deserialize(bytes);
     }
 }
 export class ExchangeReq extends pb_1.Message {
     #one_of_decls: number[][] = [];
     constructor(data?: any[] | {
         from?: string;
         event?: string;
         to?: string;
         message?: Uint8Array;
     }) {
         super();
         pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
         if (!Array.isArray(data) && typeof data == "object") {
             if ("from" in data && data.from != undefined) {
                 this.from = data.from;
             }
             if ("event" in data && data.event != undefined) {
                 this.event = data.event;
             }
             if ("to" in data && data.to != undefined) {
                 this.to = data.to;
             }
             if ("message" in data && data.message != undefined) {
                 this.message = data.message;
             }
         }
     }
     get from() {
         return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
     }
     set from(value: string) {
         pb_1.Message.setField(this, 1, value);
     }
     get event() {
         return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
     }
     set event(value: string) {
         pb_1.Message.setField(this, 2, value);
     }
     get to() {
         return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
     }
     set to(value: string) {
         pb_1.Message.setField(this, 3, value);
     }
     get message() {
         return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
     }
     set message(value: Uint8Array) {
         pb_1.Message.setField(this, 4, value);
     }
     static fromObject(data: {
         from?: string;
         event?: string;
         to?: string;
         message?: Uint8Array;
     }): ExchangeReq {
         const message = new ExchangeReq({});
         if (data.from != null) {
             message.from = data.from;
         }
         if (data.event != null) {
             message.event = data.event;
         }
         if (data.to != null) {
             message.to = data.to;
         }
         if (data.message != null) {
             message.message = data.message;
         }
         return message;
     }
     toObject() {
         const data: {
             from?: string;
             event?: string;
             to?: string;
             message?: Uint8Array;
         } = {};
         if (this.from != null) {
             data.from = this.from;
         }
         if (this.event != null) {
             data.event = this.event;
         }
         if (this.to != null) {
             data.to = this.to;
         }
         if (this.message != null) {
             data.message = this.message;
         }
         return data;
     }
     serialize(): Uint8Array;
     serialize(w: pb_1.BinaryWriter): void;
     serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
         const writer = w || new pb_1.BinaryWriter();
         if (this.from.length)
             writer.writeString(1, this.from);
         if (this.event.length)
             writer.writeString(2, this.event);
         if (this.to.length)
             writer.writeString(3, this.to);
         if (this.message.length)
             writer.writeBytes(4, this.message);
         if (!w)
             return writer.getResultBuffer();
     }
     static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeReq {
         const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExchangeReq();
         while (reader.nextField()) {
             if (reader.isEndGroup())
                 break;
             switch (reader.getFieldNumber()) {
                 case 1:
                     message.from = reader.readString();
                     break;
                 case 2:
                     message.event = reader.readString();
                     break;
                 case 3:
                     message.to = reader.readString();
                     break;
                 case 4:
                     message.message = reader.readBytes();
                     break;
                 default: reader.skipField();
             }
         }
         return message;
     }
     serializeBinary(): Uint8Array {
         return this.serialize();
     }
     static deserializeBinary(bytes: Uint8Array): ExchangeReq {
         return ExchangeReq.deserialize(bytes);
     }
 }
 